Song Themes Stuff To Do
-----------------------
Visitor Searches for Songs with One Theme

Application
[X] Create SongSearcher that can search by theme
    [X] Finds no songs
    [X] Finds a song that matches the theme
    [X] Made theme search case-insensitive
    [X] Find songs that have different themes
    [X] Find multiple songs that match the theme

Adapter
[X] Create GET endpoint for searching by theme
    [X] Return empty page
    [X] Return model saying there were no results
    [X] Return model saying there are results
    [X] Returns model with a single song matching
    [X] Returns model with a multiple song matching
    [X] Generate HTML shows there were no results
    [X] Generate HTML that shows matching results

[X] Package up according to Hexagonal Architecture
[X] First push of behavior to production!

Add a Song with a Theme
[X] Add a song that doesn't exist to the database
    [X] just below UI
    [X] Create in-memory repository
    [ ] Create database repository adapter

Songs with Multiple Themes
    [X] Find a Song if one of its Themes match
    [X] Add a Song with multiple Themes

Increase Song Attributes
    [X] Add more song attributes (artist, release title, release type)

[X] Upgrade to Spring Boot 3.2.1
[X] Upgrade to Spring Boot 3.2.2
[ ] Install Tab Shifter IntelliJ Plug-in

[ ] Adding Songs via the bulk load of TSV (text box instead of via file)
    [X] Decided to switch from CSV to TSV because copying from Excel produces tab separated columns
    [X] Add one line of Song information
        [X] Process multiple songs
        [X] Test for only one theme column (generally, not enough columns)
        [X] Skip empty rows
        [X] Skip blank rows
        [X] Ensure each song must have non-empty Artist, Song Title and Theme(s)
        [ ] Handle incorrect number of columns pasted -- having user friendly error messages
            [X] Hold onto parse errors to return them all at once from the TsvSongParser.parse() method (using Result pattern)
                Parse should return an Either (Java does not have) -- command success or return failure with information on why it failed
                    violates command query separation, but not really
            [X] Refactor parseWithResult
            [X] Have all clients of TsvSongParser use parseWithResult() instead of deprecated parse()
            [X] Display failure messages in the UI
            [X] Put the bulk import string back into the import edit box upon failure
            [ ] Split Result into two concrete subclasses for success and failure
            [ ] Change partitionBy to use custom reducer (maybe try out tee as well)
        [ ] Skip over unused columns (needs a header row)
            [X] Change all tests to include a header row
            [X] Only parse columns that we want
                    Must have at least these 3 columns
                        Artist, Song Title, Theme1
            [X] have parseAll support header
            [X] Support these remaining columns, other columns are ignored
                 Note: Theme1 already implemented
                        Release Title, Release Type, Theme2, Theme3, Theme4
            [X] Solve primitive obsession with header in parseSong - columnIndexOf(header...
            [X] Convert IllegalArgumentException to a Result failure, then enable the Disabled tests
                    If validating user input, return a Result like object
                    Otherwise, throw an exception
            [X] Write a custom assert for Result
            [X] When we call ColumnMapper with a column that doesn't exist we should get a failure result --> fix emptyStringReturnedWhenColumnDoesntExist()
        >>> [ ] Require that header rows have specific columns
                [ ] Handle missing Song Title at the TsvSongParser level
            [ ] If Release Type is Compilation, then Release Title becomes required

[ ] Persist to DB


    What is a song? (which episode did we discuss this?) -- * means Required data
        Theme(s) *  (require at least one)
        Artist *
        Song Title *
        Release Title  (UI could say something Album or Single Title)
        Release Type (Compilation, Soundtrack) - consider better name later


 [ ] Authentication/Authorization for database admin role (will use third party delegation - Kinde, Supabase, FusionAuth, Auth0)
        [X] OAuth configuration
        [X] explicitly protect admin endpoints
        [X] add
            .dispatcherTypeMatchers(DispatcherType.FORWARD, DispatcherType.ERROR).permitAll()
        before the other requestMatchers to allow error page(s) and forward requests through.
        [ ] Deploy to production, update Kinde configuration URLs for redirect

    [X] UI for bulk import, protected for admin role -- simple edit box for tab delimited Excel copy data source
    [ ] Rethink SongSearcher domain design (specifically it's immutability)
    [ ] Add ArchUnit checking

[X] Move songThemesByTitle into the adapter


Saff Squeeze

UI
[ ] Adding Song via the UI
[ ] Adding Songs via the UI
[ ]

UI Theme Sketch
    [New years {x}]  [Vampires {x}]


RELEASE "PLAN"
V0.1 - Site has songs and themes that Admin entered, includes authentication
V0.2 - Add concept of Contributor
V0.3 - Add concept of Member
V0.4 -


STREAM AD HOC NOTES
2024 Jan 6 - Episode #10

2024 Jan 3 - Episode #9
    Aggregates - the thing makes decisions (one of the things it does)
        Decider as a term instead of Aggregate root - Ted's starting to use

    Aggregates can only refer to other Aggregates via an identifier, not via the object

    Aggregates contain Value Objects and Entities (both can contain logic)
    Value Objects are immutable, therefore don't need an identifier

    CRC cards https://en.wikipedia.org/wiki/Class-responsibility-collaboration_card

2024 Jan 2 - Episode #8
	Give information
		almost never return reference to a variable directly, except primitives
	Objects have protocols

	Lombok is evil

    MVP = Minimum Lovable Product


2023 Dec 31 - Episode #7
    TCR = Test Commit Revert
        IntelliJ has a plugin to help with TCR

2023 Dec 30 - Episode #6
    High level overview of Hexagonal Arch from Ted
    Package structure is hard
    How are themes managed?
    Curation is very important - Ted's experience at EBay
    Could use LLMs to look at potentially similar taxonomy?
    https://github.com/Suigi/intellij-templates

2023 Dec 28
    is manual testing of UI enough?
    Push UI "logic" into Java code
    UI templates exclusively about presentation (i.e. should not have logic)
        https://www.martinfowler.com/eaaDev/PresentationModel.html
    If doing end-to-end testing, could use HTMLUnit
    "Security through obscurity"
    HTMX - provides interactivity with less complexity
    Patterns of Enterprise Application Architecture by Martin Fowler

    InfiTest - tests run every time code is compiled (TO-DO give a try sometime)

    CQRS stands for Command Query Responsibility Segregation
        Separating reads from writes
    CQS stands for Command Query Separation from Meyer OOSC book
        Object-Oriented Software Construction, 2nd edition (1997)
        https://bertrandmeyer.com/oosc2/

    What is a song? (which episode did we discuss this?) -- * means Required data
        Theme(s) *  (require at least one)
        Artist *
        Song Title *
        Release Title  (UI could say something Album or Single Title)
        Release Type (Compilation, Soundtrack) - consider better name later


        Format (LP, CD, 7"
        Record Label??
        Notes??
        Radio Friendly
        Link(s) to music [bandcamp, spotify, etc.]
        Link to lyrics

        Compilation vs a Collection
            Compilation = Various Artists
            Compilation =Discogs= Collection

RANDOM NOTES
Mock-free Zone

REFERENCE BOOKS MENTIONED DURING LIVE STREAMS
* GOOS book = Growing Object-Oriented Software, Guided by Tests by Steve Freeman, Nat Pryce


EARLY STORIES
Visitor searches for songs with one theme
Visitor searches for songs with multiple themes
Administrator adds a single song and its theme
Administrator adds a single song and its themes PLURAL

NEXT LEVEL STORIES
Find Song by any Song Attribute (Title, Artist, etc.)

Invitation
    Administrator invites person (unknown to the system) to be a Contributor
    Administrator assigns roles
    Administrator invites a person (unknown to the system)  to be an Administrator
Contributor Adding Songs
    Contributor adds a single song and its themes PLURAL
    Administrator approves contributor song theme submission(s)
Contributor Updating Songs
    Contributor submits a song theme edit/correction/update/additional info
    Administrator is notified when a Contributor submits contribution
    Administrator approves contributor song theme update
    Administrator rejects contributor song theme or update. Gives reason why

FUTURE FEATURE IDEAS
* Administrator bulk imports song themes from a file
* Administrator bulk imports song themes from the clipboard
* Contributor bulk imports song themes from a file
* Expand search results based on themes chosen, using synonyms or other mechanisms
* Member can register to receive notifications when new songs added for theme(s) of interest

* Member can save theme search result as a playlist
* Member can edit their playlist (remove, re-order)
* Member can generate a Spotify playlist (Youtube, Amazon, Apple, WindowsMedia Player also?)
* Member can flag songs as favorites (only visible to that member)
* Member can rate songs 0-3 stars (only visible to that member)
* Member can make their curated theme playlist public. Website will need to display curated playlists...a big-ish topci
* Identify contributors with similar taste
* Member can share their playlist with anyone
* Have the playlist be of certain time duration (consider bin packing)

* Contributor can view all of their contributions
*

QUESTIONS
* Differentiating between songs with same title, but are different songs (cover vs not-a-cover)
* Differentiating between bands with the same name
* Event-sourced domain model vs state-based domain model?
* How do we handle typos/different spelling?
    e.g. New Years vs New Year's
